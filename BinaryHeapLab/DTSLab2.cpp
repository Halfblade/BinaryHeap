////////////////////////////////////////////////////////////////////////////////////////////////
// File :			DTSLab2.cpp
// Author :			Rodney Stoeffler
// Created :		06.03.08
// Last Modified :	01.09.18
// Purpose :		Driver Program for the Binary Heap class.
// Notes :			Property of Full Sail University, Data Structures Course.
//					DON'T CHANGE THIS FILE. change your code if something is not working
//					Program Output should match the Lab Document
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// LEAK DETECTION
////////////////////////////////////////////////////////////////////////////////////////////////
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>

////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
using namespace std;
#include "BinaryHeap.h"		// Include the BinaryHeap header...and then...
#include "BinaryHeap.h"		// Inlcude it again, to make sure it is protected

////////////////////////////////////////////////////////////////////////////////////////////////
// Function :	printHeap
// Parameters :	heap - the heap to be printed
// Return :		void
////////////////////////////////////////////////////////////////////////////////////////////////
template <typename Type>
void printHeap(BinaryHeap<Type>& heap)
{
	cout << "Heap Contents : ";
	for (unsigned int i = 0; i < heap.size (); ++i)
		cout << heap[i] << ' ';
	cout << '\n';
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Function :	main
// Parameters : argc - the number of command line arguments
//				argv - the array of command line arguments
// Return :		int - 0 for success
////////////////////////////////////////////////////////////////////////////////////////////////
int main(int argc, char** argv)
{
////////////////////////////////////////////////////////////////////////////////////////////////
// LEAK DETECTION
////////////////////////////////////////////////////////////////////////////////////////////////
	
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	// this function call will set a breakpoint at the location of a leaked block
	// set the parameter to the identifier for a leaked block
	//	_CrtSetBreakAlloc(207);

////////////////////////////////////////////////////////////////////////////////////////////////
// LAB 2
////////////////////////////////////////////////////////////////////////////////////////////////
	
	cout << "**********************************************************************\n";
	cout << "**                         LAB 2 CHALLENGE :                        **\n";
	cout << "**********************************************************************\n\n";

	////////////////////////////////////////////////////////////////////////////////////////////
	// Declarations
	////////////////////////////////////////////////////////////////////////////////////////////
	BinaryHeap<int> heap;
	BinaryHeap<char> heap2;
	BinaryHeap<char> heap3;
	int Vals1[] = {7,2,3,5,8};
	char vals2[] = {'9','0','1','6','4','7','2','3','5','8'};

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 1
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "*** TEST 1 ***\n";
	printHeap(heap);

	for(int i = 0; i < 5; ++i)
	{
		heap.enqueue(Vals1[i]);
		printHeap(heap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 2
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "\n*** TEST 2 ***\n";

	for(int i = 0; i < 5; i++)
	{
		cout << "Dequeue : " << heap.dequeue() << " : ";
		heap.enqueue(10);
		printHeap(heap);
	}
	heap.clear();
	printHeap(heap);

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 3
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "\n*** TEST 3 ***\n";

	for(int i = 0; i < 10; ++i)
	{
		heap2.enqueue(vals2[i]);
		printHeap(heap2);
	}
	heap3 = heap2;
	heap2.clear();

	while(heap3.size() > 0)
	{
		cout << "Dequeue : " << heap3.dequeue() << " : ";
		printHeap(heap3);
	}

	cout << '\n';

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 4 - if this compiles, your code is wrong...
	// take another look at the type of inheritance you are using
	////////////////////////////////////////////////////////////////////////////////////////////
/*	cout << "\n*** TEST 4 ***\n";
	heap.clear();

	heap.append(9);
	heap.append(8);
	heap.append(7);
	heap.append(0);
	heap.append(6);
	heap.append(5);
	heap.append(4);
	heap.append(1);
	heap.append(2);
	heap.append(3);

	printHeap(heap);

	while(heap.size() > 0)
	{
		cout << "Dequeue : " << heap.dequeue() << " : ";
		printHeap(heap);
	}
*/
	////////////////////////////////////////////////////////////////////////////////////////////
	// Complete
	////////////////////////////////////////////////////////////////////////////////////////////
	return 0;
}